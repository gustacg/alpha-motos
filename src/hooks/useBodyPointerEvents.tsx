import { useEffect, useRef } from 'react';

/**
 * Hook para gerenciar pointer-events do body e prevenir travamentos
 * Causa raiz: body fica com pointer-events: none ap√≥s edi√ß√µes de modal
 */
export function useBodyPointerEvents() {
  const cleanupTimeoutRef = useRef<NodeJS.Timeout>();

  // Fun√ß√£o para for√ßar pointer-events: auto no body
  const ensureBodyInteractive = () => {
    if (document.body.style.pointerEvents === 'none') {
      console.log('üîß Corrigindo pointer-events do body de "none" para "auto"');
      document.body.style.pointerEvents = 'auto';
    }
  };

  // Fun√ß√£o para cleanup completo do body
  const cleanupBodyStyle = () => {
    document.body.style.pointerEvents = 'auto';
    document.body.style.overflow = 'auto';
    
    // Remover qualquer classe que possa estar bloqueando intera√ß√µes
    document.body.classList.remove('pointer-events-none', 'overflow-hidden');
    
    console.log('‚úÖ Body style limpo - pointer-events: auto');
  };

  // Verifica√ß√£o peri√≥dica de seguran√ßa
  const startSafetyCheck = () => {
    cleanupTimeoutRef.current = setInterval(() => {
      const bodyStyle = getComputedStyle(document.body);
      if (bodyStyle.pointerEvents === 'none') {
        console.warn('‚ö†Ô∏è Body com pointer-events: none detectado - corrigindo automaticamente');
        ensureBodyInteractive();
      }
    }, 1000); // Verifica a cada segundo
  };

  // Parar verifica√ß√£o de seguran√ßa
  const stopSafetyCheck = () => {
    if (cleanupTimeoutRef.current) {
      clearInterval(cleanupTimeoutRef.current);
      cleanupTimeoutRef.current = undefined;
    }
  };

  // Cleanup quando componente √© desmontado
  useEffect(() => {
    // Garantir que body est√° interativo ao montar
    ensureBodyInteractive();
    
    // Iniciar verifica√ß√£o de seguran√ßa
    startSafetyCheck();

    return () => {
      stopSafetyCheck();
      cleanupBodyStyle();
    };
  }, []);

  return {
    ensureBodyInteractive,
    cleanupBodyStyle,
    startSafetyCheck,
    stopSafetyCheck
  };
}
